#Lesson 1 : NOTES

- 'b' lowers a note by one half note step
- '#' raises a note by one half note step
To test whether an arbitrary string is valid, we can use notes.is_valid_note(str)
Examples of valid notes:
notes.is_valid_note("C")
  True
notes.is_valid_note("D#")
  True
notes.is_valid_notes("Fbb")
  True
Examples of invalid notes:
notes.is_valid_note("c") 
  False #note must be capitalized
notes.is_valid_note("D #")
  False #cant have space in between note and sharp
notes.is_valid_note("E-b")
  False
Examples of surprisingly valid notes:
notes.is_valid_note("C#####bb")
  True
notes.is_valid_note("C#bb##bb##bb#")
  True
Basically, mingus can take any number of accidentals whether wise to do so or not. Only rule is that it has to follow the correct format
Once accidentals get messy however, we can use remove_redundant_accidentals(note)
Examples:
notes.remove_redundant_accidentals("C##b")
  'C#'
notes.remove_redundant_accidentals("C#b#bb#b##bb"
  'C'
  
#NOTES AS INTEGERS
sometimes it is easier to work with notes as integers in range(0,12)
- Is possible with the functions notes.note_to_int(str) and notes.int_to_note(int)

#note to integer
notes.note_to_int("C")
  0
notes.note_to_int("B")
  11
notes.note_to_int("Cb")
  11
notes.note_to_int("C#")
  1
notes.note_to_int("Db")
  1
There is also a function to see if two notes are enharmonic 
- notes.is_enharmonic(note1,note2)

#integer to note

notes.int_to_note(0)
  "C"
notes.int_to_note(1)
  "C#"
notes.int_to_note(2)
  "D"
notes.int_to_note(3)
  "D#"
  
#NOTES AUGMENTED

notes.augment("C")
  "C#"
notes.augment("Cb")
  "C"
notes.augment("C#")
  "C##"
notes.augment("B")
  "B#"
  
#NOTES DIMINSHED

notes.diminish("C")
  "Cb"
notes.diminish("C#")
  "C"
notes.diminish("Cb")
  "Cbb"
notes.diminish("B#")
  "B"
  
 #MINOR AND MAJOR CONVERSIONS (keys --> relative major/minor)
 THIS DOES NOT WORK, DONT USE THIS


ALL OF TUTORIAL TWO DOES NOT WORK
#TUTORIAL 3
Natural diatonic intervals
taking the natural unison, second, third fourth, fifth, sixth, or seventh of a certain note in a CERTAIN KEY.

for example
intervals.second("C","C")
  taking the second note starting on C in the key of C --> D
intervals.second("E","C")
  taking the second note starting on E in the key of C --> F
intervals.second("E","D") 
  taking the second note starting on E in the key of D major --> F#

Absolute intervals
intervals.minor_second("C")
  "Db"
 intervals.major_sixth("C")
  "A"
*major_fifth and major_fourth are better known as perfect_fifth and perfect_fourth

Interval recognization

intervals.determine("C","E"):
  "major third"
intervals.determine("C","B"):
  "major seventh"
intervals.determine("Gbb","Ab")
  "augmented second"
  
 Measuring:
 
 interval.measure("C","D")
  2
 interval.measure("D","C")
  10

#TUTORIAL 4
triads are chords made of three notes

function to make chords:
chords.triad(note,key)
chords.triad("E","C")
  ["E","G","B"] --> triad starting on E, in the key of C
chord.triad("E","E")
  ["E", "G#", "B"] --> triad starting on E, in the key of E
chord.triad("E","F")
  ["E","G","Bb"] --> triad starting on E in the key of F
  
We may also request ALL the triads in A CERTAIN KEY with chords.triads(key):
chords.triads("C")

Can request absolute Triads:
chords.major_triad("C")
  ["C","E","G"]
chords.minor_triad("C")
   ["C","Eb","G"]
 chords.diminished_triad("C")
    ["C","Eb","Gb"]
    
 #NATURAL DIATONIC SEVENTHS
 actual dominant sevenths use the fifth note as its root
 https://www.libertyparkmusic.com/dominant-diminished-seventh-chords/#:~:text=A%20dominant%20seventh%20chord%20consists,(or%20minor)%20is%20G%2DB%2DD%2DF.
 dominant sevenths (starts on fifth note) - made of a major third, perfect fifth, and minor seventh (all with respect to the root)
 diminished seventh (starts on root) - all notes seperated by a minor third
  
  chords.seventh("C", "C")
["C", "E", "G", "B"]
>>> chords.seventh("D", "C")
["D", "F", "A", "C"]
>>> chords.seventh("E", "C")
["E", "G", "B", "D"]

#absolute sevenths
chords.diminished_seventh("C")
["C", "Eb", "Gb", "Bbb"]
chords.augmented_major_seventh("C")
["C", "E", "G#", "B"]
>>> chords.augmented_minor_seventh("C")
["C", "E", "G#", "Bb"]

#CHORDS BY HARMONIC FUNCTION, you can also use roman numals tho


chords.tonic("C") OR chords.I("C") (bc tonic is fist note)
["C", "E", "G"]
>>> chords.supertonic("C")
["D", "F", "A"]
>>> chords.mediant("C")
["E", "G", "B"]
>>> chords.subdominant("C") OR chords.IV("C")
["F", "A", "C"]
>>> chords.dominant("C")
["G", "B", "D"]
>>> chords.submediant("C")
["A", "C", "E"]

DOMINANT SEVENTH
chords.V7('C')
['G', 'B', 'D', 'F']

#you can also play around with modes. 
ionian, dorian, phrygian etc. For example, c dorian would start on c (but c is the second note of the scale), you would use B major (a whole note below C's) key signature 

#INVERSIONS HERE TOO
chords.first_inversion(["C", "E", "G"])
["E", "G", "C"] #basically just starting on the second note
chords.second_inversion(["C", "E", "G"]) #just starting on the third day
["G", "C", "E"]

#can recognize chords
chords.determine(["C", "E", "G"])
['C major triad']

#Tutorial 5
MODES:
scales.Dorin("D")
["D", "E", "F", "G", "A", "B", "C"] #d is the second note of c major scale, so we start on , but use the c major key
scales.Aolian("A")
["A", "B", "C", "D", "E", "F", "G"]
#has melodic and harmonic scales
scales.HarmonicMinor("A")
["A", "B", "C", "D", "E", "F", "G#"]
 scales.MelodicMinor("A")
["A", "B", "C", "D", "E", "F#", "G#"]


